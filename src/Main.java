/*
Работа с лямбда-выражениями
Для каждого задания продемонстрируйте его работу.
1. Лямбда выражение для интерфейса Printable
    Написать лямбда выражение для интерфейса Printable, который содержит один метод void print().

2. Проверка пустой строки.
    1. Создать лямбда выражение, которое возвращает значение true, если строка не null, используя функциональный интерфейс Predicate.
    2. Создать лямбда выражение, которое проверяет, что строка не пуста, используя функциональный интерфейс Predicate.
    3. Написать программу, проверяющую, что строка не null и не пуста, используя метод and() функционального интерфейса Predicate.

3. Проверка строки.
    Написать программу, которая проверяет, что строка начинается буквой “J”или “N” и заканчивается “A”. Используем функциональный интерфейс Predicate.

4. Лямбда выражение для HeavyBox.
    Написать лямбда выражение, которое принимает на вход объект типа HeavyBox и выводит на консоль сообщение “Отгрузили ящик с весом n”. “Отправляем ящик с весом n” Используем функциональный интерфейс Consumer и метод по умолчанию andThen.

5. Лямбда для Function.
    Написать лямбда выражение, которое принимает на вход число и возвращает значение “Положительное число”, “Отрицательное число” или “Ноль”. Используем функциональный интерфейс Function.

6. Лямбда для Supplier.
    Написать лямбда выражение, которое возвращает случайное число от 0 до 10. Используем функциональный интерфейс Supplier.

-----------------------------------------------------------------------------------

Работа с аннотациями и рефлексией
Задание 1: Кастомная аннотация @DeprecatedEx
Создайте свою аннотацию @DeprecatedEx, аналогичную встроенной @Deprecated, но с поясняющим сообщением.
Требования:
    Аннотация может применяться к классам и методам.
    Аннотация содержит параметр String message(), в котором указывается альтернатива устаревшему элементу.
Напишите обработчик, который:
    Принимает любой класс.
    Использует рефлексию, чтобы найти все помеченные элементы (методы и классы).
    Выводит в консоль предупреждение в формате:
        Внимание: метод 'methodName' устарел. Альтернатива: 'message'
        Внимание: класс 'ClassName' устарел. Альтернатива: 'message'

Задание 2: Кастомная сериализация в JSON с аннотацией @JsonField ***
Создайте аннотацию @JsonField, чтобы указывать имя поля в JSON-выводе.
Требования:
    Аннотация применяется к полям.
    Аннотация содержит параметр name(), задающий имя поля в JSON.
Реализуйте класс-сериализатор, который:
    Принимает любой объект.
    Через рефлексию находит все поля, помеченные @JsonField.
    Формирует строку JSON формата:
        {"jsonName1": значение, "jsonName2": значение, ...}
*/

public class Main {
    public static void main(String[] args) {
        System.out.println("Hello world!");
    }
}